#!/usr/bin/env python

import sys
import os
import argparse
import json
import subprocess
import tempfile
import datetime
import re
import signal
from dotenv import load_dotenv

class bcolors:
    RED = '\033[31m'
    GREEN = '\033[32m'
    YELLOW = '\033[33m'
    BLUE = '\033[34m'
    MAGENTA = '\033[35m'
    CYAN = '\033[36m'
    WHITE = '\033[37m'
    ENDC = '\033[0m'

DEPLOYMENT_VARS_FILTER = [
    '^DEPLOY',
    '^PROJECT',
    '^REVISION',
    '^TAG',
    '^CACHE_DIR',
    '^STAGE',
    '^TYPO3',
    '^SYMFONY',
    '^PHP',
]

PLAYBOOK_STATUS='deploy-status'
PLAYBOOK_DEPLOY='deploy'

SCRIPT_DIR=os.path.dirname(os.path.realpath(__file__))
CURRENT_DIR=os.path.realpath(os.getcwd())

DEPLOYMENT_VARS={
    'DEPLOYMENT_RC': ''
}

def messageHeader(header):
    print header;
    print '=' * len(header)
    print


def message(msg=''):
    if msg:
        print '>> ' + msg
    else:
        print ''

def messageError(msg):
    print '[ERROR] ' + msg

def runAnsiblePlaybook(args, local=False, playbook=False, foreground=True):
    envVars = dict(os.environ)

    ## Add ANSIBLE_CONFIG if file exists
    ansibleCfg = os.path.join(SCRIPT_DIR, 'ansible.cfg')
    if os.path.isfile(ansibleCfg):
        envVars['ANSIBLE_CONFIG'] = ansibleCfg

    cmd = [
        'ansible-playbook',
    ]

    if playbook:
        cmd.extend([
            os.path.join(SCRIPT_DIR, playbook + '.yml')
        ])
    else:
        cmd.extend([
            os.path.join(SCRIPT_DIR, PLAYBOOK_DEPLOY + '.yml')
        ])

    ## set inventory
    if local:
        cmd.extend([
            '-i', 'localhost,',
            '--connection=local',
        ])
    else:
        cmd.extend([
            '-i', os.path.join(SCRIPT_DIR, 'inventory/' + args.inventory)
        ])

    if args.limit:
        cmd.extend([
            '-l', args.limit
        ])

    ## Deployment variables
    f = tempfile.NamedTemporaryFile(dir=SCRIPT_DIR, prefix='vars.', suffix='.json', delete=False)
    json.dump(DEPLOYMENT_VARS, f)
    f.close()
    deploymentVarFile = f.name

    cmd.extend([
        '--extra-vars', '@' + deploymentVarFile
    ])

    if args.verbose:
        cmd.extend([
            '-' + ('v' * len(args.verbose))
        ])

    ## run ansible
    child = subprocess.Popen(
        cmd,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        env=envVars,
        preexec_fn=os.setsid
    )
    for line in iter(child.stdout.readline, ''):
        if foreground:
            line = line.replace('\r', '').replace('\n', '')
            print line
            sys.stdout.flush()
    streamdata = child.communicate()[0]
    retval = child.returncode

    ret = True
    if retval != 0:
        ret = False
        messageError('Ansible execution failed')

    DEPLOYMENT_VARS['DEPLOYMENT_RC'] = retval

    os.unlink(deploymentVarFile)

    return ret


def showSummary(args):
    maxLength = len(max(DEPLOYMENT_VARS.keys(), key=len))
    for key in DEPLOYMENT_VARS.keys():
        print ' ' + key.rjust(maxLength, ' ') + ': ' + bcolors.YELLOW + DEPLOYMENT_VARS[key] + bcolors.ENDC
    print ''


def playbookDeployStatus(args):
    message('Running stats playbook')

    if args.verbose:
        runAnsiblePlaybook(args, local=True, playbook=PLAYBOOK_STATUS, foreground=True)
    else:
        runAnsiblePlaybook(args, local=True, playbook=PLAYBOOK_STATUS, foreground=False)

def playbookDeployment(args):
    message('Running deployment playbook')
    return runAnsiblePlaybook(args)

def loadDotEnvVars(args):
    dotEnvFile = os.path.join(CURRENT_DIR, '.env')
    if os.path.isfile(dotEnvFile):
        load_dotenv(dotEnvFile)

def buildDeploymentVars(args):
    varKeyList = os.environ.keys();

    for varRegExp in DEPLOYMENT_VARS_FILTER:
        for varName in varKeyList:
            if re.match(varRegExp, varName):
                DEPLOYMENT_VARS[varName] = os.getenv(varName)

    if args.inventory:
        DEPLOYMENT_VARS['DEPLOYMENT_INVENTORY'] = args.inventory

    if args.deployFrom:
        DEPLOYMENT_VARS['DEPLOYMENT_DEPLOY_FROM'] = args.deployFrom

    if args.deployTo:
        DEPLOYMENT_VARS['DEPLOYMENT_DEPLOY_TO'] = args.deployTo

    if args.deployCurrentDir:
        DEPLOYMENT_VARS['DEPLOYMENT_CURRENT_DIR'] = args.deployCurrentDir

    if args.deployApplication:
        DEPLOYMENT_VARS['DEPLOYMENT_APPLICATION'] = args.deployApplication

    if args.deployProject:
        DEPLOYMENT_VARS['DEPLOYMENT_PROJECT'] = args.deployProject


def calculateDuration(startTime):
    endTime = datetime.datetime.now()
    duration = endTime - startTime
    total = duration.total_seconds()
    d = divmod(total,86400)  # days
    h = divmod(d[1],3600)  # hours
    m = divmod(h[1],60)  # minutes
    s = m[1]  # seconds

    DEPLOYMENT_VARS['DEPLOYMENT_DURATION_TIME'] = total
    DEPLOYMENT_VARS['DEPLOYMENT_DURATION_MINUTES'] = m
    DEPLOYMENT_VARS['DEPLOYMENT_DURATION_SECONDS'] = s
    DEPLOYMENT_VARS['DEPLOYMENT_DURATION'] = '%d:%02d min' % (m[0],s)

def main(args):
    message()
    message('Starting Ansistrano deployment')
    message()

    loadDotEnvVars(args)
    buildDeploymentVars(args)

    messageHeader('Collecting variables')
    showSummary(args)

    messageHeader('Starting deployment')
    playbookDeployStatus(args)

    startTime = datetime.datetime.now()
    status = playbookDeployment(args)
    calculateDuration(startTime)

    playbookDeployStatus(args)

    message()
    message('Duration: ' + DEPLOYMENT_VARS['DEPLOYMENT_DURATION'])
    message()

    if not status:
        sys.exit(1)
    else:
        sys.exit(0)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()

    playbook = PLAYBOOK_DEPLOY
    if os.getenv('DEPLOYMENT_PLAYBOOK'):
        playbook = os.getenv('DEPLOYMENT_PLAYBOOK')

    parser.add_argument(
        '-i', '--inventory-file',
        dest='inventory',
        default=os.getenv('DEPLOYMENT_INVENTORY'),
        help='Ansible inventory'
    )

    parser.add_argument(
        '--deploy-to',
        dest='deployTo',
        default=os.getenv('DEPLOYMENT_DEPLOY_TO'),
        help='Deploy target'
    )

    parser.add_argument(
        '--deploy-from',
        dest='deployFrom',
        default=CURRENT_DIR,
        help='Deploy from'
    )

    parser.add_argument(
        '--current-dir',
        dest='deployCurrentDir',
        default=os.getenv('DEPLOYMENT_CURRENT_DIR'),
        help='Name of current directory'
    )

    parser.add_argument(
        '--application',
        dest='deployApplication',
        default=os.getenv('DEPLOYMENT_APPLICATION'),
        help='Application'
    )

    parser.add_argument(
        '--project',
        dest='deployProject',
        default=os.getenv('DEPLOYMENT_PROJECT'),
        help='Project'
    )

    parser.add_argument(
        '--playbook',
        dest='playbook',
        default=playbook,
        help='Ansible playbook'
    )

    parser.add_argument(
        '--limit', '-l',
        dest='limit',
        help='Ansible inventory limit'
    )

    parser.add_argument(
        '--verbose', '-v',
        dest='verbose',
        const=True,
        action='append_const',
        help='Ansible verbose mode'
    )

    parser.add_argument('args', nargs=argparse.REMAINDER)

    ## Execute
    args = parser.parse_args()
    main(args)
